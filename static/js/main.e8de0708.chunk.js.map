{"version":3,"sources":["assets/images/user2.jpg","components/common/Paginator/Paginator.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Users/Users.module.css","assets/images/loader2.gif","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/common/FormsControl/FormsControl.js","utils/validators/validator.js","components/Dialogs/Dialogs.jsx","redux/dialogs-reducer.ts","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","components/Users/User.jsx","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","components/common/preloader/preloader.js","api/users-api.ts","redux/users-reducer.ts","redux/user-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","api/profile-api.ts","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/login/login.jsx","redux/app-reducer.ts","components/Chat/AddMessage/AddMessage.tsx","components/Chat/Messages/Messages.tsx","components/Chat/Chat.tsx","App.js","serviceWorker.js","redux/redux-store.ts","index.js","components/Dialogs/Dialogs.module.css","components/common/FormsControl/FormsControl.module.css","components/Nav/Nav.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","ResultCodeEnum","ResultCodeForCaptchaEnum","News","Music","Settings","DialogItem","props","path","id","className","styles","dialog","active","to","src","avatar","name","MessageItem","message","Textarea","input","meta","hasError","touched","error","formControl","Input","required","value","maxLengthCreator","maxLength","length","max10","MessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","initialState","actions","type","dialogsReducer","action","body","withAuthRedirect","Component","RedirectComponent","this","React","connect","auth","DialogsContainer","compose","dispatch","User","user","followingInProgress","unfollow","follow","photos","small","userPhoto","followed","disabled","some","onClick","ghost","status","Paginator","totalItemsCount","currentPage","pageSize","onPageChanged","portionsSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setportionNumber","leftPortionPageNunber","rightPortionPageNunber","cn","paginator","filter","p","selectPage","pageNumber","e","Users","totalUsersCount","users","u","Preloader","preloader","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","then","response","data","userId","post","delete","isFetching","count","usersReducer","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","getUsersThunk","unfollowThunk","followThunk","a","resultCode","items","totalCount","ProfileStatusWithHooks","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","currentTarget","onBlur","updateStatus","autoFocus","ProfileDataFormRedux","profile","formSummaryError","Object","keys","contacts","style","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","saveProfile","discriptionBlock","large","mainPhoto","target","files","savePhoto","initialValues","formData","profileAPI","put","photoFile","FormData","append","posts","likesCount","newPostText","getUserProfile","profileReducer","newPost","postId","Post","item","maxLength10","MyPosts","memo","PostsElements","postsBlock","MyPostFormRedux","addPost","MyPostsContainer","profilePage","Profile","ProfileContainer","match","params","authUserId","history","getStatus","refreshProfile","prevProps","prevState","file","getState","Error","stopSubmit","_error","Promise","reject","withRouter","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","loginBlock","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","getAuthUserData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","LoginReduxForm","CaptchaIsRequired","initializated","appReducer","AddMessage","webSocketChannel","setMessage","readyStatus","setReadyStatus","openHandler","addEventListener","removeEventListener","send","Message","photo","userName","Messages","setMessages","messageHandler","newMessages","JSON","parse","prevMessages","height","overflowY","index","Chat","setWebSocketChannel","ws","closeHandler","console","log","setTimeout","createChannel","close","WebSocket","SubMenu","Menu","Content","Sider","Footer","App","initializeApp","padding","margin","width","defaultOpenKeys","title","LaptopOutlined","minHeight","render","app","promise","all","Boolean","window","location","hostname","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e8de0708.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user2.8793711e.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1l2VB\",\"pageNumber\":\"Paginator_pageNumber__15rEo\",\"selectPage\":\"Paginator_selectPage__38Z97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Cbyl\",\"posts\":\"MyPosts_posts__1wC7d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__-hfIS\",\"loginBlock\":\"Header_loginBlock__DVon8\",\"name\":\"Header_name__2nghL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__fQI4x\",\"loader\":\"Users_loader__1-JxN\"};","module.exports = __webpack_public_path__ + \"static/media/loader2.6fb841a4.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__c76Do\"};","import axios from 'axios'\r\nimport { UserType, ProfileType } from './../types/types'\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        withCredentials: true,\r\n        baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n        headers: { 'API-KEY': 'c79fa325-f895-4b38-87f8-be88f765c262' }\r\n    })\r\n\r\n  \r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type ResponseType <D={}, RC = ResultCodeEnum>= {\r\n    data: D\r\n    resultCode: RC\r\n    messages:Array<string>\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst News = () => {\r\n    \r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default News;","import React from 'react';\r\nimport styles from './Music.module.css';\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Music;","import React from 'react';\r\nimport styles from './Settings.module.css';\r\n\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/Dialogs/' + props.id\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink to={path}><img src={props.avatar}/>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div className={styles.dialog}>{props.message}</div>\r\n    )\r\n};\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport styles from './FormsControl.module.css'\r\n\r\nexport const Textarea = ({ input, meta, ...props }) => {    // НОС для textarea\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({ input, meta, ...props }) => {   \r\nconst hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react'\r\nimport styles from './Dialogs.module.css'\r\nimport { Redirect } from 'react-router-dom'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../common/FormsControl/FormsControl'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validator'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map( (d) => <DialogItem avatar={d.avatar} name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map( (m) => <MessageItem message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n           \r\n            <div className={styles.messages}>\r\n                <div>{messagesElements}</div>\r\n                <MessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst max10 = maxLengthCreator(10);\r\n\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, max10]}\r\n                       name='newMessageBody' \r\n                       placeholder='Enter your message'/>\r\n            </div>\r\n\r\n            <div><button>SEND</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MessageFormRedux = reduxForm({\r\n    form:'dialogMessageForm'\r\n})(MessageForm)\r\n\r\n\r\nexport default Dialogs;","import { InferActionsTypes } from './redux-store';\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Dmitriy', avatar: 'https://1avatara.ru/pic/animal/animal0013.jpg'},\r\n        { id: 2, name: 'Andrey', avatar: 'https://1avatara.ru/pic/animal/animal0029.jpg'},\r\n        { id: 3, name: 'Michail', avatar: 'https://1avatara.ru/pic/animal/animal0033.jpg'},\r\n        { id: 4, name: 'Dasha', avatar: 'http://1avatara.ru/pic/animal/animal0024.jpg'}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        { id: 1, message: 'Hello' }\r\n    ] as Array<MessagesType>\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: 7, message: body }]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessageCreator: (newMessageBody:string) => { return { type: SEND_MESSAGE, newMessageBody} as const }\r\n}\r\n\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    \r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n                if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n                \r\n                return <Component {...this.props} />\r\n        }\r\n    }\r\n    let mapStateToPropsForRedirect = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n    let connectedAuthRedirectComponent = connect (mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent;\r\n}","import React from 'react'\r\nimport Dialogs from './Dialogs'\r\nimport { actions } from '../../redux/dialogs-reducer'\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\n;\r\n\r\nlet mapStateToProps = (state) => { \r\n    return{\r\n        dialogsPage:state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {      \r\n    return{\r\n        sendMessage: (newMessageBody) => {dispatch(actions.sendMessageCreator(newMessageBody))},\r\n    }\r\n}\r\n\r\nlet DialogsContainer = compose (\r\n    connect (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect  \r\n) (Dialogs)\r\n\r\nexport default DialogsContainer","import React from 'react';\r\nimport styles from './Users.module.css';\r\nimport userPhoto from '../../assets/images/user2.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow, ...props}) => {\r\n    return ( \r\n        <div>\r\n            {\r\n                    <div key={user.id}>\r\n                        <span>\r\n                            <div>\r\n                                <NavLink to={'/profile/' + user.id}>\r\n                                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} />\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                {user.followed\r\n                                    ? <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {     \r\n                                        unfollow(user.id)\r\n                                    }} type=\"primary\" ghost>unFOllOW</Button>\r\n\r\n                                    : <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                        follow(user.id)\r\n                                    }} type=\"primary\" ghost>FOllOW</Button>}\r\n                            </div>\r\n                        </span>\r\n                        <span>\r\n                            <span>\r\n                                <div>{user.name}</div>\r\n                                <div>{user.status}</div>\r\n                            </span>\r\n                            <span>\r\n                                <div>{\"user.location.country\"}</div>\r\n                                <div>{\"user.location.city\"}</div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import React, { useState } from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames'\r\n\r\ntype Props = {\r\n    totalItemsCount: number\r\n    currentPage: number \r\n    pageSize: number \r\n    onPageChanged: (pageNumber: number) => void \r\n    portionsSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<Props> = ({totalItemsCount, currentPage, pageSize, onPageChanged, portionsSize=10, ...props}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil (pagesCount / portionsSize);  \r\n    let [portionNumber, setportionNumber] = useState(1);\r\n    let leftPortionPageNunber = (portionNumber - 1) * (portionsSize + 1); \r\n    let rightPortionPageNunber = portionNumber * (portionsSize + 1);\r\n\r\n    return (\r\n        <div className={cn(styles.paginator)}>\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setportionNumber(portionNumber - 1) }}>PREV</button>\r\n            }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNunber && p <= rightPortionPageNunber)\r\n                .map(p => {\r\n                    return <span className={cn({\r\n                        [styles.selectPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                        key={p}\r\n                        onClick={(e) => { onPageChanged(p) }}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button onClick={() => { setportionNumber(portionNumber + 1) }}>NEXT</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport User from './User';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype Props = {\r\n    totalUsersCount: number\r\n    currentPage: number \r\n    pageSize: number \r\n    onPageChanged: (pageNumber: number) => void \r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    follow:(userId: number) => void\r\n    unfollow:(userId: number) => void\r\n}\r\n\r\n\r\nlet Users: React.FC<Props> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users,...props}) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                onPageChanged={onPageChanged} />\r\n            <div>\r\n                {\r\n                    users.map(u => <User user={u}\r\n                        key={u.id}\r\n                        followingInProgress={props.followingInProgress}\r\n                        follow={props.follow}\r\n                        unfollow={props.unfollow} />)\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Users;","import React from 'react';\r\nimport preloader from '../../../assets/images/loader2.gif'\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import { AxiosPromise } from 'axios'\r\nimport { GetItemsType, instance, ResponseType } from './api'\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage=1, pageSize=10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {                  \r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`) as AxiosPromise<ResponseType>\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import { InferActionsTypes, BaseThunkType } from './redux-store';\r\nimport { UserType } from './../types/types';\r\nimport { usersAPI } from \"../api/users-api\";\r\n\r\nconst FOLLOW ='FOLLOW';                             \r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS';\r\n\r\n\r\nlet initialState = {                     \r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 1000,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> // array of users ids\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,                         \r\n                 users: state.users.map( u => {                  \r\n                    if(u.id===action.userId){\r\n                        return {...u, followed: true}\r\n                     }\r\n                    return u\r\n                } )    \r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,                          \r\n                users: state.users.map( u => {                  \r\n                    if(u.id===action.userId){\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                } )    \r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                 followingInProgress: action.isFetching\r\n                  ? [...state.followingInProgress, action.userId]\r\n                  : state.followingInProgress.filter(id => id !== action.userId)\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => { return { type: FOLLOW, userId } as const},\r\n    unfollowSuccess: (userId: number) => { return { type: UNFOLLOW, userId } as const},\r\n    setUsersAC: (users: Array<UserType>) => { return { type: SET_USERS, users } as const},\r\n    setCurrentPageAC: (currentPage: number) => { return { type: SET_CURRENT_PAGE, currentPage } as const},\r\n    setTotalUsersCountAC: (totalUsersCount: number) => { return { type: SET_TOTAL_USERS_COUNT, count: totalUsersCount } as const},\r\n    toggleIsFetchingAC: (isFetching: boolean) => { return { type: TOGGLE_IS_FETCHING, isFetching } as const},\r\n    toggleFollowingProgressAC: (isFetching: boolean, userId: number) => { return { type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const}\r\n}\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number): ThunkType => {                \r\n    return async (dispatch) => {     \r\n        dispatch(actions.toggleIsFetchingAC(true));\r\n        dispatch(actions.setCurrentPageAC(currentPage));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)   \r\n            dispatch(actions.toggleIsFetchingAC(false))\r\n            dispatch(actions.setUsersAC(data.items))\r\n            dispatch (actions.setTotalUsersCountAC (data.totalCount))\r\n    }\r\n}\r\nexport const followThunk = (userId: number):ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n\r\n    let response = await usersAPI.follow(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actions.followSuccess(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n}\r\nexport const unfollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n\r\n    let response = await usersAPI.unfollow(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actions.unfollowSuccess(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n}\r\n\r\nexport default usersReducer;","import { AppStateType } from './redux-store';\r\nimport { createSelector } from \"reselect\"\r\n\r\nexport const getUsersSimpleSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSimpleSelector, (users)=> {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { getUsersThunk, followThunk, unfollowThunk} from '../../redux/users-reducer';\r\nimport { getPageSize, getTotalUsersCount,getCurrentPage,getIsFetching,getFollowingInProgress, getUsers } from '../../redux/user-selectors';\r\nimport { UserType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapDispatchPropsType = {\r\n    followThunk:(userId: number) => void\r\n    unfollowThunk:(userId: number) => void\r\n    getUsersThunk: (currentPage: number, pageSize: number) => void\r\n}\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    followingInProgress: Array<number>\r\n    users: Array<UserType>\r\n}\r\ntype Props = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<Props> {\r\n    componentDidMount() {              \r\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)  \r\n    }\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunk(pageNumber , this.props.pageSize)\r\n    }\r\n    render() {                                           \r\n        return <> \r\n            {this.props.isFetching ? <Preloader /> : null}           \r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                onPageChanged={this.onPageChanged}\r\n                unfollow={this.props.unfollowThunk}\r\n                follow={this.props.followThunk}\r\n                followingInProgress={this.props.followingInProgress} />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),            \r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose (\r\n    withAuthRedirect,\r\n    connect (mapStateToProps, { followThunk, unfollowThunk, getUsersThunk }),             \r\n) (UsersContainer)\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    let activeEditMode = () => {\r\n        setEditMode(true)\r\n    } \r\n    let deActiveEditMode  = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)               \r\n    }\r\n    let onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activeEditMode}>{props.status || 'No status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deActiveEditMode} autoFocus={true}\r\n                           value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nclass ProfileStatus extends React.Component<PropsType, StateType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activeEditMode = () => {\r\n        this.setState({editMode:true})               \r\n    }\r\n    deActiveEditMode  = () => {\r\n        this.setState({editMode:false})\r\n        this.props.updateStatus(this.state.status)               \r\n    }\r\n    onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value         \r\n        })\r\n    }\r\n    componentDidUpdate (prevProps: PropsType, prevState: StateType) {\r\n        if(prevProps.status !== this.props.status) {   \r\n            this.setState({\r\n                status:this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&        \r\n                    <div>\r\n                        <span onDoubleClick={this.activeEditMode}>{this.state.status || 'No status'}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deActiveEditMode}  value={this.state.status}  />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControl/FormsControl';\r\nimport styles from './../../common/FormsControl/FormsControl.module.css'\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {error &&\r\n                <div className={styles.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n            <div>\r\n                <b>Full name:</b> <Field placeholder={'Name'} name={'fullName'} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a JOB:</b> <Field name={'lookingForAJob'} component={Input} type={'checkbox'} />\r\n            </div>\r\n            <div>\r\n                <b>My proffesional skills:</b> <Field placeholder={'My proffesional skills'} name={'lookingForAJobDescription'} component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> <Field placeholder={'About me'} name={'aboutMe'} component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={style.contact}>\r\n                        <b>{key}:<Field placeholder={key} name={'contacts.' + key} component={Input} /></b>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n export const ProfileDataFormRedux = reduxForm ({\r\n    form: 'editProfile'\r\n}) (ProfileDataForm)\r\n\r\n","import React, { useState } from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user2.jpg'\r\nimport { ProfileDataFormRedux } from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus,isOwner,saveProfile, ...props}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if(!profile){\r\n        return <Preloader />\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if(e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData) =>{\r\n        saveProfile(formData).then(()=>{\r\n            setEditMode(false)\r\n        })\r\n     }\r\n\r\n    return (\r\n        <div >\r\n            <div className={style.discriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={style.mainPhoto} />\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormRedux initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={()=> {setEditMode(true)}} \r\n                                   profile={profile} \r\n                                   isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status}\r\n                    updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}   \r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a JOB:</b> {profile.lookingForAJob ? 'YES' : 'NO'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My proffesional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={style.contact}> <b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\nexport default ProfileInfo;","import { instance, ResponseType } from './api'\r\nimport { PhotosType, ProfileType } from '../types/types'\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId) \r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId) \r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType<PhotosType>>(`profile/status/`, {status: status} ) \r\n    },\r\n    savePhoto(photoFile: any) {                  \r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n\r\n        return instance.put(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multypart/form-data'\r\n            }\r\n        } ) \r\n    },\r\n    saveProfile(profile: ProfileType) {                  \r\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile`, profile )\r\n    }\r\n}\r\n","import { InferActionsTypes, BaseThunkType } from './redux-store';\r\nimport { PostsType, ProfileType, PhotosType } from './../types/types'\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { profileAPI } from \"../api/profile-api\"\r\n\r\n\r\nconst ADD_POST ='ADD-POST'                             \r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\r\nconst SET_STATUS = 'SET-STATUS'\r\nconst DELETE_POST = 'DELETE-POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE-PHOTO-SUCCESS'\r\n\r\n\r\nlet initialState = {                     \r\n    posts: [\r\n        { id: 1, message: 'Hello', likesCount: 12 },\r\n        { id: 2, message: 'Hi', likesCount: 32 },\r\n        { id: 3, message: 'How are you?', likesCount: 23 }\r\n    ] as Array<PostsType>,\r\n    newPostText: \"\" as string | null,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:{\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return{\r\n                ...state,\r\n                posts:[...state.posts, newPost],\r\n                newPostText: ''\r\n            }              \r\n        }\r\n        case SET_USER_PROFILE :{\r\n            return{\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS :{\r\n            return{\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST :{\r\n            return{\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS :{\r\n            return{\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText:string) => { return { type: ADD_POST, newPostText } as const },\r\n    setUserProfile: (profile: ProfileType) => { return { type: SET_USER_PROFILE, profile } as const },\r\n    setStatus: (status: string) => { return { type: SET_STATUS, status } as const },\r\n    deletePost: (postId: number) => { return { type: DELETE_POST, postId } as const },\r\n    savePhotoSuccess: (photos: PhotosType) => { return { type: SAVE_PHOTO_SUCCESS, photos } as const }\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {             \r\n    let response = await profileAPI.getProfile(userId)            \r\n    \r\n    dispatch (actions.setUserProfile(response.data)) \r\n}\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {         \r\n    let response = await profileAPI.getStatus(userId)   \r\n             \r\n    dispatch (actions.setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n};\r\nexport const savePhoto = (file: any): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actions.savePhotoSuccess(response.data.data.photos))\r\n        }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id\r\n    const response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error('userId can not be null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('editProfile', { _error: response.data.messages[0] }))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport styles from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div>\r\n                <span>{props.likesCount}</span>\r\n            </div>\r\n            <div>\r\n                <img src='https://avatars.mds.yandex.net/get-pdb/1655359/523fff70-896c-4166-b041-161e1b53dce8/s1200?webp=false' />\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post; ","import React from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/FormsControl/FormsControl';\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo( (props) => {\r\n\r\n    let PostsElements = props.posts\r\n    .map( p => <Post key={p.id} message={p.message} likesCount={'LIKE',p.likesCount}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n   \r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My post</h3>\r\n            <MyPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={styles.posts}>\r\n\r\n                {PostsElements}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst MyPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} \r\n                       placeholder='Post message'\r\n                       name='newPostText' \r\n                       validate={[required, maxLength10]}/>            \r\n            </div>\r\n            <div>\r\n                <button>POST</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MyPostFormRedux = reduxForm({\r\n    form: 'profileAddNewPostForm'\r\n}) (MyPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addPost: (newPostText) => {\r\n            dispatch( actions.addPostActionCreator(newPostText))   \r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId                   \r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n               this.props.history.push('./login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)             \r\n        this.props.getStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                profile={this.props.profile}\r\n                isOwner={!this.props.match.params.userId}           \r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />              \r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose (\r\n    connect (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect         \r\n) (ProfileContainer)    ","import React from 'react';\r\nimport styles from'./Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Layout, Menu, Avatar, Row, Col, Button } from 'antd';\r\nimport { UserOutlined} from '@ant-design/icons';\r\n\r\nconst Header = (props) => {\r\n    const { Header } = Layout;\r\n    return (\r\n        <Header className=\"header\">\r\n            <div className=\"logo\" />\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><NavLink to='/users'>Users</NavLink></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                <Col span={4}>\r\n                    <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                    <div className={styles.loginBlock}>\r\n                        {props.isAuth\r\n                            ? <div className={styles.name}>{props.login} - <Button type=\"primary\" onClick={props.logout}>Log out</Button></div>\r\n                            : <NavLink to={'/login'}>Login</NavLink>}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n    )\r\n}\r\nexport default Header;","import { instance, ResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum } from './api'\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n        id: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get <ResponseType <MeResponseDataType> >(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null){\r\n        return instance.post <ResponseType <LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum> >(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\n\r\n\r\n","import { instance } from './api'\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl(){\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n    }\r\n}","import { ResultCodeForCaptchaEnum } from './../api/api';\r\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { authAPI } from \"../api/auth-api\"\r\nimport { securityAPI } from \"../api/security-api\"\r\nimport { ResultCodeEnum} from \"../api/api\"\r\n\r\nconst SET_USER_DATA ='SET-USER-DATA'                             \r\nconst GET_CAPTCHA_URL_SUCCESS ='GET-CAPTCHA-URL-SUCCESS'                             \r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {  \r\n    id: null as number | null,                   \r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null , login: string | null , isAuth: boolean) => {\r\n        return { type: SET_USER_DATA, payload: { id, email, login, isAuth } as const}\r\n    },\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => {\r\n        return { type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl} as const}\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.me()                        \r\n       \r\n        if (response.data.resultCode === ResultCodeEnum.Success) {\r\n            let {id, email, login} = response.data.data\r\n            dispatch (actions.setAuthUserData(id, email, login, true) )   \r\n        }\r\n}\r\nexport const login = (email:string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha);\r\n                            \r\n        if (response.data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData())      \r\n        } else {\r\n            if(response.data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some ERROR'; \r\n            dispatch(stopSubmit('login', {_error: message}))    \r\n        }\r\n};\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\nexport const logout = (): ThunkType => async(dispatch) => {\r\n    const response = await authAPI.logout();                  \r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false))      \r\n        }\r\n}\r\nexport default authReducer;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer'\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state)=> ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect (mapStateToProps, {logout}) (HeaderContainer)","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required } from '../../utils/validators/validator';\r\nimport { Input } from '../common/FormsControl/FormsControl';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from './../common/FormsControl/FormsControl.module.css'\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input}\r\n                       validate={[required]}/>     \r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} type={'password'}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}\r\n                       validate={[required]}/> remember me\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && <Field name={'captcha'} component={Input}  validate={[required]}/>}\r\n\r\n            {error &&                                         \r\n                <div className={styles.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm ({         \r\n    form: 'login'\r\n}) (LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) =>{\r\n       props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect (mapStateToProps, {login}) (Login);   ","import { InferActionsTypes } from './redux-store';\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\nconst SET_INITIALIZATED ='SN/APP/SET-INITIALIZATED';                             \r\n\r\nexport type InitialStateType = {\r\n    initializated: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {  \r\n    initializated: false\r\n}\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZATED:\r\n            return {\r\n                ...state,\r\n                initializated: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport const actions = {\r\n    initializatedSuccess: () => { return {type: SET_INITIALIZATED} as const }\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    \r\n    Promise.all([promise])\r\n    .then(() => {\r\n        dispatch(actions.initializatedSuccess())\r\n    })\r\n\r\n};\r\n\r\n\r\nexport default appReducer","import React, { useEffect, useState } from 'react';\r\n\r\nconst AddMessage: React.FC<{webSocketChannel: WebSocket | null}> = ({webSocketChannel}) => {\r\n    const [message, setMessage] = useState('')\r\n\r\n    const [readyStatus, setReadyStatus] = useState('pending')\r\n\r\n    useEffect(() => {\r\n        const openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        webSocketChannel?.addEventListener('open', openHandler)\r\n\r\n        return () => {\r\n            webSocketChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    },[webSocketChannel])\r\n\r\n    const sendMessage = () =>{\r\n        if(!message) {\r\n            return\r\n        }\r\n        webSocketChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={webSocketChannel == null || readyStatus !== 'ready'} onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddMessage","import React, { useEffect, useState } from 'react';\r\nimport { ChatMessageType } from '../../../types/types';\r\n\r\nconst Messages: React.FC<{webSocketChannel: WebSocket | null}> = ({webSocketChannel}) => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(()=>{\r\n        const messageHandler = (e: MessageEvent) => {\r\n            const newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages)=>[...prevMessages, ...newMessages])\r\n        }\r\n        webSocketChannel?.addEventListener('message', messageHandler)\r\n        \r\n        return () => {\r\n            webSocketChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    },[webSocketChannel])\r\n\r\n    return (\r\n        <div style={{height:'500px', overflowY:'auto'}}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n  \r\n    return (\r\n        <div>\r\n            <img src={message.photo} /> <b>{message.userName}</b>\r\n            <br />\r\n            {message.message}\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages","import React, { useEffect, useState } from 'react';\r\nimport AddMessage from './AddMessage/AddMessage';\r\nimport Messages from './Messages/Messages';\r\n\r\nconst Chat: React.FC = () => {\r\n    const [webSocketChannel, setWebSocketChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n\r\n        const closeHandler = () => {\r\n            console.log('close channel')\r\n            setTimeout(createChannel, 4000)\r\n        }\r\n        function createChannel() {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\n            webSocketChannel?.addEventListener('close', closeHandler)\r\n\r\n            setWebSocketChannel(ws)\r\n        }\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages webSocketChannel={webSocketChannel} />\r\n            <AddMessage webSocketChannel={webSocketChannel} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chat","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Nav from './components/Nav/Nav';\nimport {Route, withRouter} from 'react-router-dom';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/login/login';\nimport { initializeApp } from './redux/app-reducer';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Preloader from './components/common/preloader/preloader';\nimport { NavLink } from 'react-router-dom';\nimport Chat from './components/Chat/Chat';\n\nimport { Layout, Menu, Breadcrumb,Avatar, Row, Col } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n  render() {\n    if(!this.props.initializated) {\n      return <Preloader/>\n    }\n    \n    return (\n      <Layout className='app-project'>\n        <HeaderContainer />\n        <Content style={{ padding: '0 50px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n          </Breadcrumb>\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n            <Sider className=\"site-layout-background\" width={200}>\n              <Menu\n                mode=\"inline\"\n                defaultSelectedKeys={['2']}\n                defaultOpenKeys={['sub1']}\n                style={{ height: '100%' }}\n              >\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\n                  <Menu.Item key=\"1\"><NavLink to='/profile'>Profile</NavLink></Menu.Item>\n                  <Menu.Item key=\"2\"><NavLink to='/dialogs'>Masseges</NavLink></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"Users\">\n                  <Menu.Item key=\"3\"><NavLink to='/users'>Users</NavLink></Menu.Item>\n                  <Menu.Item key=\"4\"><NavLink to='/chat'>Chat</NavLink></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub3\" icon={<LaptopOutlined />} title=\"subnav\">\n                  <Menu.Item key=\"5\"><NavLink to='/news'>News</NavLink></Menu.Item>\n                  <Menu.Item key=\"6\"><NavLink to='/music'>Music</NavLink></Menu.Item>\n                  <Menu.Item key=\"7\"><NavLink to='/settings'>Settings</NavLink></Menu.Item>\n                </SubMenu>\n              </Menu>\n            </Sider>\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\n\n              <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\n              <Route path='/dialogs' render={() => <DialogsContainer />} />\n              <Route path='/users' render={() => <UsersContainer />} />\n              <Route path='/news' render={() => <News />} />\n              <Route path='/music' render={() => <Music />} />\n              <Route path='/settings' render={() => <Settings />} />\n              <Route path='/login' render={() => <Login />} />\n              <Route path='/chat' render={() => <Chat />} />\n\n            </Content>\n          </Layout>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initializated: state.app.initializated\n})\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware, Action} from 'redux'\r\nimport profileReducer from \"./profile-reducer\"\r\nimport dialogsReducer from \"./dialogs-reducer\"\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport thunkMiddleware from 'redux-thunk'  \r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './app-reducer'\r\n\r\nconst reducers = combineReducers({              \r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app:appReducer\r\n});\r\n\r\ntype reducerType = typeof reducers\r\nexport type AppStateType = ReturnType<reducerType>\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction <R, AppStateType, unknown, A>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))  \r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store';  \nimport {Provider} from 'react-redux';       \nimport { HashRouter } from 'react-router-dom';\n\n  ReactDOM.render(\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n  );\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1slVo\",\"dialogsItems\":\"Dialogs_dialogsItems__1BfSL\",\"active\":\"Dialogs_active__3vSWf\",\"dialog\":\"Dialogs_dialog__RBKuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControl_error__1hDmw\",\"formSummaryError\":\"FormsControl_formSummaryError__3vDGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__j7Chi\",\"item\":\"Nav_item__2PX-r\",\"gold\":\"Nav_gold__28BN5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__2_qjK\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3IZob\",\"contact\":\"ProfileInfo_contact__2HjQr\"};"],"sourceRoot":""}